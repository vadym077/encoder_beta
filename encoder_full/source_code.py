import tkinter as tk
from tkinter import ttk
from base64 import b64encode, b64decode
import pyperclip

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –¶–µ–∑–∞—Ä—è
def caesar_cipher(text, shift):
    result = []
    for letter in text:
        if letter.isalpha():
            is_upper = letter.isupper()  # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –ª—ñ—Ç–µ—Ä–∞ –≤ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
            letter = letter.upper()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –ª—ñ—Ç–µ—Ä—É —É –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
            start, end = ord('–ê'), ord('–Ø')  # –ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä
            if '–ê' <= letter <= '–Ø':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('–ê'), ord('–Ø')
            elif '–∞' <= letter <= '—è':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('–∞'), ord('—è')
            elif 'A' <= letter <= 'Z':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - –ª–∞—Ç–∏–Ω—Å—å–∫–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('A'), ord('Z')
            elif 'a' <= letter <= 'z':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - –ª–∞—Ç–∏–Ω—Å—å–∫–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('a'), ord('z')
            elif '“ê' <= letter <= '–©':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('“ê'), ord('–©')
            elif '“ë' <= letter <= '—â':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('“ë'), ord('—â')
            elif '–¨' <= letter <= '–Ø':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('–¨'), ord('–Ø')
            elif '—å' <= letter <= '—è':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞
                start, end = ord('—å'), ord('—è')
            elif letter == '–Ü':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ –Ü
                start, end = ord('–Ü'), ord('–Ü')
            elif letter == 'i':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - –ª–∞—Ç–∏–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ i
                start, end = ord('i'), ord('i')
            elif letter == '–Ñ':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ –Ñ
                start, end = ord('–Ñ'), ord('–Ñ')
            elif letter == '–á':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ –á
                start, end = ord('–á'), ord('–á')
            elif letter == '“ê':  # –Ø–∫—â–æ –ª—ñ—Ç–µ—Ä–∞ - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ “ê
                start, end = ord('“ê'), ord('“ê')

            new_letter = chr((ord(letter) - start + shift) % (end - start + 1) + start)  # –ó—Å—É–≤–∞—î–º–æ –ª—ñ—Ç–µ—Ä—É
            result.append(new_letter if is_upper else new_letter.lower())  # –î–æ–¥–∞—î–º–æ –ª—ñ—Ç–µ—Ä—É —É —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Å–ø–∏—Å–æ–∫
        else:
            result.append(letter)  # –Ø–∫—â–æ —Å–∏–º–≤–æ–ª - –Ω–µ –ª—ñ—Ç–µ—Ä–∞, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –±–µ–∑ –∑–º—ñ–Ω

    return ''.join(result)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç—Ä–æ–∫–∏

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
def encrypt():
    text = input_field.get()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ–ª—è
    if mode == "base64":  # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è - Base64
        text = b64encode(text.encode("utf-8")).decode("utf-8")  # –ö–æ–¥—É—î–º–æ —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç Base64
    elif mode == "caesar":  # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è - –¶–µ–∑–∞—Ä—è
        text = caesar_cipher(text, 3)  # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è –∑ –∫–ª—é—á–µ–º 3

    output_field.config(state="normal")  # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –≤–∏–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    output_field.delete(0, tk.END)  # –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    output_field.insert(0, text)  # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    output_field.config(state="readonly")  # –ë–ª–æ–∫—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    output_field.focus_set()  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    copy_button.config(command=lambda: pyperclip.copy(text))  # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ö–æ–ø—ñ—é–≤–∞—Ç–∏" –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
def decrypt():
    text = input_field.get()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ–ª—è
    if mode == "base64":  # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è - Base64
        text = b64decode(text).decode("utf-8")  # –î–µ–∫–æ–¥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ñ–æ—Ä–º–∞—Ç—É Base64
    elif mode == "caesar":  # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è - –¶–µ–∑–∞—Ä—è
        text = caesar_cipher(text, -3)  # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è –∑ –∫–ª—é—á–µ–º -3 (–¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è)

    output_field.config(state="normal")  # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –≤–∏–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    output_field.delete(0, tk.END)  # –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    output_field.insert(0, text)  # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    output_field.config(state="readonly")  # –ë–ª–æ–∫—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    output_field.focus_set()  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    copy_button.config(command=lambda: pyperclip.copy(text))  # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ö–æ–ø—ñ—é–≤–∞—Ç–∏" –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
def update_mode(new_mode):
    global mode
    mode = new_mode

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É —Ç–∞ –≤–∏–≤–æ–¥—É
def clear_fields():
    input_field.delete(0, tk.END)  # –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
    output_field.config(state="normal")  # –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –≤–∏–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    output_field.delete(0, tk.END)  # –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É
    output_field.config(state="readonly")  # –ë–ª–æ–∫—É—î–º–æ –ø–æ–ª–µ –≤–∏–≤–æ–¥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏
window = tk.Tk()
window.title("–®–∏—Ñ—Ä—É–≤–∞–ª—å–Ω–∏–∫")

window.update_idletasks()
window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x_coordinate = (screen_width / 2) - (window_width / 2)
y_coordinate = (screen_height / 2) - (window_height / 2)
window.geometry("+%d+%d" % (x_coordinate, y_coordinate))

window.resizable(False, False)

frame = ttk.Frame(window)
frame.grid(row=0, column=0, padx=10, pady=10)

input_label = ttk.Label(frame, text="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç:")
input_label.grid(row=1, column=0, padx=5, pady=5)

input_field = ttk.Entry(frame)
input_field.grid(row=1, column=1, padx=5, pady=5)

output_label = ttk.Label(frame, text="–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:")
output_label.grid(row=2, column=0, padx=5, pady=5)

output_field = ttk.Entry(frame, state="readonly")
output_field.grid(row=2, column=1, padx=5, pady=5)

encrypt_button = ttk.Button(frame, text="–ó–∞—à–∏—Ñ—Ä—É–≤–∞—Ç–∏", command=encrypt)
encrypt_button.grid(row=3, column=0, columnspan=1, padx=5, pady=5)

decrypt_button = ttk.Button(frame, text="–†–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏", command=decrypt)
decrypt_button.grid(row=3, column=1, columnspan=1, padx=5, pady=5)

method_label = ttk.Label(frame, text="–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
method_label.grid(row=4, column=0, padx=5, pady=5)

mode_switch_base64 = ttk.Radiobutton(frame, text="Base64", value="base64", command=lambda: update_mode("base64"))
mode_switch_base64.grid(row=5, column=0, padx=5, pady=5)

mode_switch_caesar = ttk.Radiobutton(frame, text="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è", value="caesar", command=lambda: update_mode("caesar"))
mode_switch_caesar.grid(row=5, column=1, padx=5, pady=5)

mode = "base64"
mode_switch_base64.invoke()

copy_button = ttk.Button(frame, text="üìã", command=lambda: pyperclip.copy(output_field.get()))
copy_button.grid(row=2, column=2)

clear_button = ttk.Button(frame, text="‚úñ", command=clear_fields)
clear_button.grid(row=1, column=2)

style = ttk.Style()
style.configure("Rounded.TEntry", borderwidth=5, relief="ridge", padding=10)
style.configure("Rounded.TButton", borderwidth=5, relief="ridge", padding=10)

input_field.config(style="Rounded.TEntry")
output_field.config(style="Rounded.TEntry")
encrypt_button.config(style="Rounded.TButton")
decrypt_button.config(style="Rounded.TButton")
copy_button.config(style="Rounded.TButton")
clear_button.config(style="Rounded.TButton")

window.mainloop()
